# Azure pipeline definition

trigger:
- master

# Run across multiple platform and python version combinations
strategy:
  matrix:
    linux_python35:
      imageName: "ubuntu-16.04"
      python.version: "3.5"
    linux_python36:
      imageName: "ubuntu-16.04"
      python.version: "3.6"
    linux_python37:
      imageName: "ubuntu-16.04"
      python.version: "3.7"
    mac_python35:
      imageName: "macos-10.13"
      python.version: "3.5"
    mac_python36:
      imageName: "macos-10.13"
      python.version: "3.6"
    mac_python37:
      imageName: "macos-10.13"
      python.version: "3.7"
    windows_python35:
      imageName: "vs2017-win2016"
      python.version: "3.5"
    windows_python36:
      imageName: "vs2017-win2016"
      python.version: "3.6"
    windows_python37:
      imageName: "vs2017-win2016"
      python.version: "3.7"
  maxParallel: 3

pool:
  vmImage: $(imageName)

steps:
# Initialize python
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

# Extra dependencies for Mac and Python 3.5
- script: |
    brew install sdl sdl_image sdl_mixer sdl_ttf portmidi
  condition: and(eq(variables['imageName'], 'macos-10.13'), eq(variables['python.version'], '3.5'))
  displayName: 'Extra dependencies for Mac and Python 3.5'

# Install PIP and dependencies
- script: |
    python -m pip install --upgrade pip
    pip install -r ./src/requirements.txt
  displayName: 'Install dependencies'

# Auto discover and run python unittests
- script: |
    cd src
    python -m unittest discover ./WarrensTest
  displayName: 'unittest discovery and execution'

# Package binary for Linux
- script: |
    pip install pyinstaller
    cd util/pyinstaller
    ./pyinstaller-package.sh
  condition: and(eq(variables['imageName'], 'ubuntu-16.04'), eq(variables['python.version'], '3.5'))
  displayName: 'Build distribution binary for Linux (Ubuntu 16.04 with python 3.5)'

# Package binary for Windows
- script: |
    pip install pyinstaller
    cd util
    cd pyinstaller
    pyinstaller-package.bat
  condition: and(eq(variables['imageName'], 'vs2017-win2016'), eq(variables['python.version'], '3.5'))
  displayName: 'Build distribution binary for Windows (Windows 2016 with python 3.5)'

# Copy binary to staging area
- task: CopyFiles@2
  inputs:
    Contents: 'dist/*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  condition: and(eq(variables['imageName'], 'ubuntu-16.04'), eq(variables['python.version'], '3.5'))
  displayName: 'Copy binaries to staging area'

# Publish binary
# Note: you can download these for inspection through the API, see doc here:
# https://docs.microsoft.com/en-gb/rest/api/azure/devops/build/artifacts/list?view=azure-devops-rest-5.0
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'binaries'
    publishLocation: 'Container'
  condition: and(eq(variables['imageName'], 'ubuntu-16.04'), eq(variables['python.version'], '3.5'))
  displayName: 'Publish binaries'